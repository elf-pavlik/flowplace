<game>
  <description>
    Membrane currencies are used to establish circles by forming a context that names currencies and users, and then assigning users to roles (player_classes) in the circle's currencies.<br />
    Player classes: self (represents the circle as a whole), member (users names in the circle), namer (the stewards responsible for adding users and currencies to the circle)<br />
    Self Summary functions: Currencies--The list of currencies used by the circle<br />
    Self Plays:
      -- none yet --
    Member Summary function: Permissions--The list of permissions a member has.<br />
    Member Plays:
      -- none yet --
    Binder Summary Function: none
    Binder Plays:
      request_binding(from,to,type)  # request containment binding between membranes
      accept_binding(from,to,play)  # accept containment binding between membranes
    Namer Summary Function: none
    Namer Plays:
    bind_currency(from,to,currency,name)  # adds a currency to the circle to be known as name.
    unbind_currency(from,to,currency,name)  # removes currency known as name from the circle.
      name_member(from,user,name)  # names a new member player into the circle as for a user.
      grant(from,to,currency,player_class)  # adds a member of the circle to a currency as a given player_class.
      revoke(from,to,currency,player_class)
    Inviter Summary Function: invitations list and status
    Inviter Plays:
      invite(from,email,text)
      revoke_invitation(from,email,explanation)
  </description>
  <player_classes>
    <player_class name="member" />
    <player_class name="namer" />
    <player_class name="inviter" />
    <player_class name="binder" />
    <player_class name="self" />
  </player_classes>
  <states>
    <state player_class="member"><hash name="permissions" /></state>
    <state player_class="self"><hash name="currencies" /></state>
    <state player_class="binder"><hash name="requests" /></state>
    <state player_class="inviter"><hash name="invitations" /></state>
  </states>

  <plays>
    <play name="_new_self">
      <fields>
        <field type="" id="class" />
      </fields>
      <script type="ruby">
        <![CDATA[ @self_state.currencies = {};]]>
      </script>
    </play>
    <play name="_new_binder">
      <script type="ruby">
        <![CDATA[ @binder_state.requests = {};]]>
      </script>
    </play>
    <play name="_new_member">
      <fields>
        <field type="" id="class" />
      </fields>
      <script type="ruby">
        <![CDATA[ @member_state.permissions = {};]]>
      </script>
    </play>
    <play name="_new_inviter">
      <script type="ruby">
        <![CDATA[ @inviter_state.invitations = {};]]>
      </script>
    </play>
    <play name="request_binding" player_classes="binder">
      <fields>
         <field type="player_binder" id="from" />
         <field type="external_player_binder" id="to" />
         <field type="range" id="request_type" start="0" end="1" display_as_enumerable="" />
      </fields>
      <script type="ruby">
        <![CDATA[
         to = @play.to['_currency_account']
         from = @play.from['_currency_account']
         request_type = @play.request_type
         @play.to['requests']['from'] ||= {}
         @play.to['requests']['from'][from.name] = request_type
         @play.from['requests']['to'] ||= {}
         @play.from['requests']['to'][to.name] = request_type
         true
         ]]>
      </script>
      <play_sentence lang='en'> <from /> requests <to /> to accept <request_type /></play_sentence>
    </play>
    <play name="bind_currency" player_classes="namer">
      <fields>
         <field type="player_namer" id="from" />
         <field type="player_self" id="to" />
         <field type="currency" id="currency" />
         <field type="string" id="name" />
         <field type="boolean" id="autojoin" />
      </fields>
      <script type="ruby">
        <![CDATA[
         currencies =  @play.to['currencies']
         return "Currency must be specified" unless @play.currency.is_a?(Currency)
         name = @play.name
         name ||= @play.currency.name
         currencies[@play.currency.id] = {'name' => name,'autojoin' => @play.autojoin}
         true
         ]]>
      </script>
      <play_sentence lang='en'> <from /> binds <currency /> to <to /> as <name /> with autojoin as <autojoin /></play_sentence>
    </play>
    <play name="unbind_currency" player_classes="namer">
      <fields>
         <field type="player_namer" id="from" />
         <field type="player_self" id="to" />
         <field type="currency" id="currency" />
      </fields>
      <script type="ruby">
        <![CDATA[
         currencies =  @play.to['currencies']
         return "Currency must be specified" unless @play.currency.is_a?(Currency)
         currencies.delete(@play.currency.id)
         true
         ]]>
      </script>
      <play_sentence lang='en'> <from /> unbinds <currency /> from <to /></play_sentence>
    </play>
    <play name="name_member" player_classes="namer">
      <fields>
         <field type="player_namer" id="from" />
         <field type="user" id="user" />
         <field type="string" id="name" />
      </fields>
      <script type="ruby">
        <![CDATA[
          ca = self.api_new_player('member',@play.user,@play.name)
          if ca.valid?
            true
          else
            ca.errors.full_messages.join('; ')
          end
         ]]>
      </script>
      <play_sentence lang='en'><from /> dubs <user /> as <name /></play_sentence>
    </play>
    <play name="grant" player_classes="namer">
      <fields>
         <field type="player_namer" id="from" />
         <field type="player_member" id="to" />
         <field type="currency" id="currency" />
         <field type="string" id="player_class" />
      </fields>
      <script type="ruby">
        <![CDATA[
          currency = @play.currency
           to = @play.to['_currency_account']
           ca = currency.api_new_player(@play.player_class,to.user,to.name)
           if ca.valid?
             perms = @play.to['permissions']
             perms[currency.name] ||= {}
             perms[currency.name][@play.player_class] = true
             true
           else
             ca.errors.full_messages.join('; ')
           end
         ]]>
      </script>
      <play_sentence lang='en'><from /> grants <to /> access to <currency /> as <player_class /></play_sentence>
    </play>
    <play name="revoke" player_classes="namer">
      <fields>
         <field type="player_namer" id="from" />
         <field type="player_member" id="to" />
         <field type="currency" id="currency" />
         <field type="string" id="player_class" />
      </fields>
      <script type="ruby">
        <![CDATA[
        perms = @play.to['permissions']
        currency = @play.currency
        currency_name = currency.name
        perms[currency_name] ||= {}
        perms[currency_name].delete(@play.player_class)
        perms.delete(@play.currency) if perms[currency_name].size == 0
        to_ca = @play.to['_currency_account']
        ca = CurrencyAccount.find(:first,:conditions=>["user_id=? and currency_id = ? and player_class = ?",to_ca.user.id,currency.id,@play.player_class])
        if ca
          ca.destroy
          true
        else
          "Couldn't find #{@play.player_class} account in #{currency_name} for #{to_ca.name}"
        end
        ]]>
      </script>
      <play_sentence lang='en'><from /> revokes <to />'s <player_class /> access to <currency /></play_sentence>
    </play>
    <play name="invite" player_classes="inviter">
      <fields>
         <field type="player_inviter" id="from" />
         <field type="string" id="email" />
         <field type="string" id="text" />
      </fields>
      <script type="ruby">
        <![CDATA[
        invitations = @play.from['invitations']
        return_value = true
        if invitations.has_key?(@play.email)
          return_value = "You have already sent an invitation to #{@play.email}"
        else
          invitations[@play.email] = {'text'=>@play.text,'key'=> key = Time.now.to_f}
          params = {}
          params[:to_email] = @play.email
          params[:circle] = self.name
          params[:currency_account] = @play.from['_currency_account']
          params[:extra] =  @play.text
          params[:key] = key
          begin
            CurrencyAccountMailer.deliver_circle_invitation(params)
          rescue Exception => e
            return_value = "Could not deliver email: #{e}"
          end
        end
        return_value
        ]]>
      </script>
      <play_sentence lang='en'><from /> invites <email /> to circle with text <text /></play_sentence>
    </play>
  </plays>
</game>